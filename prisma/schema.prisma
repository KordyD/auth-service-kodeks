generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model access_rights {
  module_id Int
  user_id   Int?
  group_id  Int?
  id        Int     @id @default(autoincrement())
  groups    groups? @relation(fields: [group_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_group_id")
  modules   modules @relation(fields: [module_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_module_id")
  users     users?  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user_id")
}

model auth_origins {
  id     Int      @id @default(autoincrement())
  name   String   @unique @db.VarChar(25)
  groups groups[]
  users  users[]
}

model groups {
  id             Int             @id @default(autoincrement())
  name           String          @db.VarChar(100)
  auth_origin_id Int
  description    String?         @db.VarChar(255)
  comment        String?
  access_rights  access_rights[]
  auth_origins   auth_origins    @relation(fields: [auth_origin_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_groups   users_groups[]
}

model modules {
  id            Int             @id @default(autoincrement())
  name          String          @db.VarChar
  service_id    Int
  access_rights access_rights[]
  services      services        @relation(fields: [service_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model services {
  id      Int       @id @default(autoincrement())
  name    String    @db.VarChar
  modules modules[]
}

model users {
  id             Int             @id @default(autoincrement())
  first_name     String          @db.VarChar(100)
  last_name      String?         @db.VarChar(100)
  patronymic     String?         @db.VarChar(100)
  auth_origin_id Int
  email          String          @unique @db.VarChar(100)
  login          String          @unique @db.VarChar(100)
  prefix         String?         @db.VarChar(100)
  suffix         String?         @db.VarChar(100)
  comment        String?         @db.VarChar(100)
  password       String
  token          String?
  department_id  Int?
  access_rights  access_rights[]
  auth_origins   auth_origins    @relation(fields: [auth_origin_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  departments    departments?    @relation(fields: [department_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_groups   users_groups[]
}

model users_groups {
  user_id  Int
  group_id Int
  id       Int    @id @default(autoincrement())
  groups   groups @relation(fields: [group_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_group_id")
  users    users  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_user_id")
}

model departments {
  id    Int     @id @default(autoincrement())
  name  String  @unique @db.VarChar(100)
  users users[]
}
